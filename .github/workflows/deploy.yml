name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - ".github/workflows/deploy.yml"
  release:
    types:
      - published
  workflow_dispatch:

env:
  FORCE_COLOR: 1

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]

    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y && yum install -y openssl-devel"
      CIBW_SKIP: cp36-*
      # Build separate wheels for macOS's different architectures.
      CIBW_ARCHS_MACOS: "x86_64"
      # Build only on Linux architectures that don't need qemu emulation.
      CIBW_ARCHS_LINUX: "x86_64"
      # Run the test suite after each build.
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_TEST_REQUIRES: "pytest"
      CIBW_TEST_COMMAND: pytest {package}/tests

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - if: runner.os == 'Windows'
        run: |
            echo 'PATH=/c/Python38:/c/Python38/Scripts:$PATH' >> $GITHUB_ENV
            echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
            echo 'RUSTFLAGS=-Ctarget-feature=+crt-static' >> $GITHUB_ENV
            echo 'CIBW_BEFORE_BUILD=python -m pip install --upgrade pip' >> $GITHUB_ENV

      - if: runner.os != 'Linux'
        name: Setup env when not using docker
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: pip
          cache-dependency-path: ".github/workflows/deploy.yml"

      - name: Install dependencies
        run: |
          python -m pip install cibuildwheel==2.10.0
          python -m pip install -U twine

      - name: Build wheels
        run: cd pyscandir && python -m cibuildwheel --output-dir wheelhouse

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

      - name: Publish package to PyPI
        if: github.event.action == 'published'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
        run: twine upload --skip-existing dist/*.whl

      - name: Publish package to TestPyPI
        if: |
          github.repository == 'brmmm3/scandir-rs' &&
          github.ref == 'refs/heads/main'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
        run: |
          twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    needs: ['build-native-wheels']

    steps:
      - uses: actions/checkout@v3
      - run: |
            git fetch --prune --unshallow
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: pip
          cache-dependency-path: "setup.py"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U build twine wheel
      - name: Build package
        run: |
          git tag
          cd pyscandir
          python setup.py --version
          python -m build --sdist
          twine check --strict dist/*
      - name: Publish package to PyPI
        if: github.event.action == 'published'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}

      - name: Publish package to TestPyPI
        if: |
          github.repository == 'brmmm3/scandir-rs' &&
          github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
